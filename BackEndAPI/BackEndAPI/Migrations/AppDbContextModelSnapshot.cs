// <auto-generated />
using System;
using BackEndAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackEndAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackEndAPI.Models.Componente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlImagen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Componentes");

                    b.HasDiscriminator().HasValue("Componente");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BackEndAPI.Models.Ensamblaje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlmacenamientoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("FuentePoderId")
                        .HasColumnType("int");

                    b.Property<int>("MemoriaRamId")
                        .HasColumnType("int");

                    b.Property<int>("PlacaBaseId")
                        .HasColumnType("int");

                    b.Property<int>("ProcesadorId")
                        .HasColumnType("int");

                    b.Property<int?>("TarjetaGraficaId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlmacenamientoId");

                    b.HasIndex("FuentePoderId");

                    b.HasIndex("MemoriaRamId");

                    b.HasIndex("PlacaBaseId");

                    b.HasIndex("ProcesadorId");

                    b.HasIndex("TarjetaGraficaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Ensamblajes");
                });

            modelBuilder.Entity("BackEndAPI.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("BackEndAPI.Models.Componentes.Almacenamiento", b =>
                {
                    b.HasBaseType("BackEndAPI.Models.Componente");

                    b.Property<string>("Interfaz")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Almacenamiento");
                });

            modelBuilder.Entity("BackEndAPI.Models.Componentes.FuentePoder", b =>
                {
                    b.HasBaseType("BackEndAPI.Models.Componente");

                    b.Property<int>("PotenciaWatts")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("FuentePoder");
                });

            modelBuilder.Entity("BackEndAPI.Models.Componentes.MemoriaRAM", b =>
                {
                    b.HasBaseType("BackEndAPI.Models.Componente");

                    b.Property<string>("TipoMemoria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MemoriaRAM");
                });

            modelBuilder.Entity("BackEndAPI.Models.Componentes.PlacaBase", b =>
                {
                    b.HasBaseType("BackEndAPI.Models.Componente");

                    b.Property<string>("Socket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoMemoria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Componentes", t =>
                        {
                            t.Property("TipoMemoria")
                                .HasColumnName("PlacaBase_TipoMemoria");
                        });

                    b.HasDiscriminator().HasValue("PlacaBase");
                });

            modelBuilder.Entity("BackEndAPI.Models.Componentes.Procesador", b =>
                {
                    b.HasBaseType("BackEndAPI.Models.Componente");

                    b.Property<string>("Socket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Componentes", t =>
                        {
                            t.Property("Socket")
                                .HasColumnName("Procesador_Socket");
                        });

                    b.HasDiscriminator().HasValue("Procesador");
                });

            modelBuilder.Entity("BackEndAPI.Models.Componentes.TarjetaGrafica", b =>
                {
                    b.HasBaseType("BackEndAPI.Models.Componente");

                    b.Property<int>("ConsumoWatts")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("TarjetaGrafica");
                });

            modelBuilder.Entity("BackEndAPI.Models.Ensamblaje", b =>
                {
                    b.HasOne("BackEndAPI.Models.Componentes.Almacenamiento", "Almacenamiento")
                        .WithMany()
                        .HasForeignKey("AlmacenamientoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Models.Componentes.FuentePoder", "FuentePoder")
                        .WithMany()
                        .HasForeignKey("FuentePoderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Models.Componentes.MemoriaRAM", "MemoriaRAM")
                        .WithMany()
                        .HasForeignKey("MemoriaRamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Models.Componentes.PlacaBase", "PlacaBase")
                        .WithMany()
                        .HasForeignKey("PlacaBaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Models.Componentes.Procesador", "Procesador")
                        .WithMany()
                        .HasForeignKey("ProcesadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Models.Componentes.TarjetaGrafica", "TarjetaGrafica")
                        .WithMany()
                        .HasForeignKey("TarjetaGraficaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BackEndAPI.Models.Usuario", "Usuario")
                        .WithMany("Ensamblajes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Almacenamiento");

                    b.Navigation("FuentePoder");

                    b.Navigation("MemoriaRAM");

                    b.Navigation("PlacaBase");

                    b.Navigation("Procesador");

                    b.Navigation("TarjetaGrafica");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BackEndAPI.Models.Usuario", b =>
                {
                    b.Navigation("Ensamblajes");
                });
#pragma warning restore 612, 618
        }
    }
}
